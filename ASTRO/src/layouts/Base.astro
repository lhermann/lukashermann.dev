---
import '../styles/global.css'
import '@fortawesome/fontawesome-svg-core/styles.css'

const {
  title,
  description,
  keywords,
  author = 'Lukas Hermann',
  published,
  modified,
  meta = [],
  image,
} = Astro.props

// Simple title handling - no automatic suffixes
const iTitle = title || 'Lukas Hermann - Entrepreneur & Front-End Developer'
const iDescription = description || 'I bootstrap a profitable business and tweet about it. Building great products is something I love doing.'
const iImage = image ? new URL(image, Astro.url).href : new URL('/lukashermann-meta-img.jpg', Astro.url).href
const canonicalURL = Astro.url // new URL(Astro.url.pathname, Astro.site)

const defaultMeta = [
  { name: 'twitter:site', content: '@_lhermann' },
  { name: 'twitter:creator', content: '@_lhermann' },
  { name: 'twitter:title', content: iTitle },
  { name: 'twitter:description', content: iDescription },
  { name: 'twitter:image', content: iImage },
  { name: 'twitter:image:alt', content: 'Lukas Hermann - Entrepreneur & Front-End Developer' },
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:domain', content: 'lukashermann.dev' },
  { property: 'og:site_name', content: 'Lukas Hermann' },
  { property: 'og:title', content: iTitle },
  { property: 'og:description', content: iDescription },
  { property: 'og:image', content: iImage },
  { property: 'og:image:height', content: "900" },
  { property: 'og:image:width', content: "600" },
  { property: 'og:image:alt', content: 'Lukas Hermann - Entrepreneur & Front-End Developer' },
  { property: 'og:type', content: 'website' },
  { property: 'og:url', content: canonicalURL },
]

// Simple meta merging - custom meta overrides defaults
const finalMeta = [...defaultMeta, ...meta]

const schemadotorg = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  'name': 'Lukas Hermann',
  'jobTitle': 'Entrepreneur & Front-End Developer',
  'description': 'Founder of Stagetimer, entrepreneur who bootstraps profitable businesses, and front-end developer specializing in Vue.js and UX design.',
  'url': 'https://lukashermann.dev',
  'sameAs': [
    'https://twitter.com/_lhermann',
    'https://github.com/lhermann',
    'https://www.linkedin.com/in/lukas-hermann/',
    'https://dev.to/lhermann'
  ],
  'knowsAbout': ['Vue.js', 'JavaScript', 'UX Design', 'Frontend Development', 'SaaS', 'Bootstrapping', 'Entrepreneurship'],
  'worksFor': {
    '@type': 'Organization',
    'name': 'Stagetimer',
    'url': 'https://stagetimer.io'
  },
  'alumniOf': {
    '@type': 'CollegeOrUniversity',
    'name': 'HS Esslingen'
  },
  'birthPlace': 'Germany',
  'nationality': 'German'
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="theme-color" content="#7c3aed" />

    <!-- Generator -->
    <meta name="generator" content={Astro.generator} />

    <!-- Title, Description -->
    <title>{iTitle}</title>
    <meta name="description" content={iDescription} />

    <!-- SEO Metadata -->
    {keywords && <meta name="keywords" content={keywords} />}
    <meta name="author" content={author} />
    {published && <meta property="article:published_time" content={new Date(published).toISOString()} />}
    {modified && <meta property="article:modified_time" content={new Date(modified).toISOString()} />}
    {author && <meta property="article:author" content={author} />}

    <!-- Twitter Card & Open Graph -->
    {finalMeta.filter(item => item.name).map(item => (
      <meta name={item.name} content={item.content} />
    ))}
    {finalMeta.filter(item => item.property).map(item => (
      <meta property={item.property} content={item.content} />
    ))}

    {schemadotorg && (
      <!-- Schema.org markup for Google -->
      <script type="application/ld+json" set:html={JSON.stringify(schemadotorg)}></script>
    )}

    <!-- Font Awesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  </head>
  <body>
    <slot />
  </body>
</html>
